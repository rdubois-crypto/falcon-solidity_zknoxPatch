//from ZKNOXHQ test vectors

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;


import {Test, console} from "forge-std/Test.sol";
import {Falcon} from "../src/Falcon.sol";


contract ZKNOX_FalconTest is Test {
  

    Falcon falcon;
    
    function setUp() public {
        falcon = new Falcon();
    }


     /********* INVALID VECTORS, expected result from signature second verification of each example is FALSE */

     //CVETH_2025_080201: forge from uncontrolled salt length

     /* tested using forge vm.expectRevert(), use expect(myContract.myFunction()).to.be.reverted if your environment is hardhat*/
    //demonstrating critical vulnerability: forge signature from original message
    function test_CVETH_2025_080201_vector1 () public{
       
        // example with Tetration test vector
        bytes memory msg1 = "falcon in sol now?";
        // forgefmt: disable-next-line
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
         for (uint i = 0; i < 512; i++) {//CVETH_2025_080202: remove malleability
            if (tmps1[i] < 0) {
                tmps1[i] = int256(12289) + tmps1[i];
            } 
            }
        Falcon.Signature memory signature;
        signature.s1 = new int256[](512);


        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        //signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // forgefmt: disable-next-line
        uint[512] memory tmph = [uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }
        falcon.verify(msg1, signature, h);

        // Another (message, salt) with the same signature
        bytes memory msg2 = "falcon in sol now?\xc5";
        signature
            .salt = "\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        

        vm.expectRevert("Invalid salt length");
        falcon.verify(msg2, signature, h);
        
    }



    function test_CVETH_2025_080201_vector2() public{
        // forgefmt: disable-next-line
        int[512] memory tmp_s1 = [int(-50), 79,83,-8,506,15,-66,83,-246,24,-406,-36,285,-124,34,-315,-404,96,-512,-100,133,-214,67,161,20,-380,368,247,-155,52,-53,152,-73,-79,-245,39,-243,-79,156,-157,-161,288,37,76,280,-24,357,-304,-12,-102,166,-160,106,-188,112,-79,110,111,-135,39,-26,151,7,168,84,-166,187,300,-58,-89,-91,-474,-168,132,-55,203,198,-158,164,-185,-90,-36,-48,275,27,51,-159,72,342,180,-11,411,178,-153,214,52,129,-60,231,16,215,-169,-82,-246,366,-64,396,-158,43,-181,-19,-143,184,27,-11,-154,170,-25,181,83,134,-381,179,9,-221,266,-64,58,-202,-43,-102,-73,121,256,-5,60,-319,123,252,-45,33,198,288,95,-126,18,-462,308,15,-48,-15,-105,-37,-195,134,-221,-17,-16,35,339,147,102,161,339,1,-137,258,228,91,112,-128,-173,-28,-3,127,320,105,136,-454,-32,65,-158,207,-9,119,-179,49,-30,-109,-57,-60,194,172,435,-149,-377,-233,25,-92,60,-170,56,302,183,-203,-4,-22,213,130,-292,240,-172,-22,14,135,106,-1,-11,48,-37,150,237,19,-149,68,305,-11,273,-97,68,-24,-19,76,-89,-44,-43,3,104,78,-96,-41,202,255,297,313,-103,-106,-37,-63,416,-8,-268,-455,150,-29,-244,2,109,115,-79,-34,-533,-300,-85,62,59,-303,-163,-147,-55,-144,198,257,-220,-60,45,76,-70,282,165,-24,-203,7,-36,186,-16,85,297,159,-80,-26,197,-165,159,113,-293,147,338,-118,-29,-139,-129,387,13,-112,222,85,37,339,33,202,115,-137,-94,173,-22,86,165,-107,112,-78,-130,177,56,119,-18,-1,122,314,-8,-31,-169,-260,291,194,-74,124,-123,-16,84,-148,46,-123,-136,323,-87,170,-65,215,-285,51,244,41,-114,-181,47,171,226,-137,320,-62,35,-20,229,95,38,-137,160,-68,113,-133,122,31,-137,217,130,-11,-222,-313,-125,155,305,-106,-94,-8,-16,-15,-273,4,-146,-150,-102,118,-73,255,-451,78,82,-106,314,-36,116,-4,3,66,248,119,-77,28,-60,-163,72,11,-174,-43,72,150,-304,-347,213,-270,102,151,287,-301,-74,142,366,70,-129,143,-189,11,129,-5,134,-61,222,-181,-150,-35,65,-68,114,59,-42,29,56,243,-333,66,227,-349,-43,290,23,52,-306,-169,-153,-36,-292,5,196,325,-13,138,-130,-44,-207,-263,-12,-117,-56,73,65,-146,-133,-526,-4,61,-63,-87,87,71,-122,132,215,122,-181,67,138,453,-39,-279,186,176,-52,-142,236,163,93,195,87,66,104,-48,-214,30,185,181,-194];
         for (uint i = 0; i < 512; i++) {
            if (tmp_s1[i] < 0) {//CVETH_2025_080202: remove malleability
                tmp_s1[i] = int256(12289) + tmp_s1[i];
            } 
            }
        uint[512] memory tmp_pk = [uint(3140), 8080,3427,4973,2973,3448,11058,6792,9947,9954,11213,10128,9786,5851,11545,6464,5518,1381,6427,1415,5489,7847,2226,5037,8835,539,11940,8662,3923,10122,6045,236,754,1345,11768,8815,8124,2906,11774,9550,2135,10811,2210,9413,729,10746,8753,6644,6838,5350,3947,10691,10180,2008,8772,7854,11081,3021,4701,10622,12156,2653,4594,5832,11221,5398,7373,6765,4172,1235,6788,6165,1737,5906,1260,4010,49,3361,10729,10754,3531,7013,5521,10303,5313,11726,7711,6438,3150,6801,10988,6897,11459,1014,6156,8486,6158,9847,5241,8798,12240,8296,3369,7425,1983,7842,2796,5670,4129,9888,3996,5970,2484,9609,1050,9202,7953,6427,9213,6241,8646,920,1392,10304,8415,11240,115,8860,4566,2181,3060,3789,4203,541,7063,1005,11452,5899,1190,599,5939,9208,462,10420,1070,4066,7963,10745,12075,8650,2800,8088,4057,2413,1507,9412,6022,3026,6803,1182,8405,9499,546,7586,5419,11618,6727,11941,6561,11497,6731,6233,6355,289,1850,3652,8530,3827,1452,4812,1377,7821,2148,1165,5071,4631,5612,9290,3738,10878,307,5713,3877,6370,8072,5521,2279,4704,6099,11578,3020,11256,10466,1000,5013,4113,3058,9092,5574,3599,10160,3997,6271,9864,5035,1692,3731,5555,10598,10027,9461,8267,8933,2888,3053,115,1180,6058,10833,11668,9380,10077,1407,791,6977,1726,11801,8606,4981,8587,6242,125,1955,1087,3212,8606,5859,1612,7632,1011,10338,6312,679,11218,9311,4606,10083,5515,4897,11575,3764,5667,10421,1771,2038,9143,703,1932,2166,3777,2408,3653,4409,2384,6041,1241,2705,9576,11986,12102,4463,5747,6954,7113,9341,8569,3612,3296,538,11151,5804,11798,8599,8825,5219,12160,2369,5926,9930,3739,2355,8627,3087,3479,2558,9074,8915,9694,4971,11434,8238,10442,10692,7411,5473,1519,6714,1809,7540,5506,7817,9703,11906,412,1514,2572,1496,1463,6736,6135,9818,130,3604,11287,7981,1539,630,3464,9426,5586,9930,11010,2602,4657,7159,7473,11261,5793,5397,10508,6656,9026,10523,12061,2954,2329,6070,8239,9911,10858,5538,4596,7594,8682,7274,2961,5227,7198,3858,11114,6347,11798,8600,10877,63,430,979,7206,7033,2808,6511,7168,8144,1700,1129,2508,9935,624,9968,12219,984,11734,4719,10036,781,608,2564,4269,10194,1517,7243,9860,4432,8394,8314,11645,9767,3170,10708,3682,8609,11850,6263,9830,8026,1518,3279,5618,7331,4311,9488,11276,8517,11663,10398,10077,1112,2986,11166,1909,11062,6101,10930,10479,9121,4639,8409,6281,2842,4479,1455,9032,11773,3743,1619,6584,10078,8987,10988,7212,442,11388,6244,1637,10303,2777,2432,1833,11456,8342,11695,118,9440,1785,1203,11668,4328,12095,10894,10163,7027,7098,9611,5490,4790,7092,6828,6746,7647,12150,3077,7502,777,10312,3051,2301,3970,5305,9412,7073,685,3565,10763,10911,5895,2299,7242,2068,8213,6487,6055,11255,9815,11665,11977,3746,9791,11236,10674,9682,8476,9834];
        uint[] memory pk = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }

        Falcon.Signature memory sig;
        sig.s1 = new int256[](512);
        //sig.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            sig.s1[i] = tmp_s1[i];
        }
        // message
        bytes memory msg3 = "Send ______ 1 USDC ______ to vitalik.eth";
        // salt
        sig
            .salt = "\x20\x61\x6e\x64\x20\x35\x30\x30\x30\x30\x20\x55\x53\x44\x43\x20\x74\x6f\x20\x52\x65\x6b\x74\x4d\x65\x2e\x65\x74\x68\x21";
        try falcon.verify(msg3, sig, pk) {}  catch{}
        // message
        bytes
            memory msg4 = "Send ______ 1 USDC ______ to vitalik.eth and 50000 USDC to RektMe.eth!";
        // salt
        sig.salt = "";
        vm.expectRevert("Invalid salt length");
        falcon.verify(msg4, sig, pk);

    }

    //CVETH_2025_080202 : malleability from coefficient signs

    function test_CVETH_2025_080202() public{
           // example with Tetration test vector
        bytes memory msg1 = "falcon in sol now?";
        // forgefmt: disable-next-line
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
         
        Falcon.Signature memory signature;
        signature.s1 = new int256[](512);


        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        //signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // forgefmt: disable-next-line
        uint[512] memory tmph = [uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }

        vm.expectRevert("Invalid coefficient");
        falcon.verify(msg1, signature, h);


    }

}
