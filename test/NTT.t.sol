// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {NTT} from "../src/NTT.sol";

contract NTTTest is Test {
    // ans generated from python code
    // prettier-ignore
    uint16[512] f = [uint16(12255), 12139, 4897, 5862, 7302, 11341, 1213, 3476, 3122, 7098, 6744, 10065, 10973, 4082, 78, 10588, 3680, 6090, 608, 1196, 11606, 11387, 3840, 11805, 11976, 5643, 4923, 1573, 7108, 11292, 4717, 12166, 2947, 4196, 9354, 7018, 9523, 8393, 8168, 714, 5801, 5269, 2010, 563, 9598, 6272, 3704, 2726, 6318, 3914, 5933, 12076, 3485, 2448, 12200, 6410, 7291, 4062, 2938, 4842, 9921, 9406, 949, 838, 11945, 5374, 1806, 4419, 9800, 39, 4150, 10519, 1452, 7352, 10910, 7836, 503, 9383, 7676, 8761, 8062, 10273, 5150, 9236, 2700, 8903, 2300, 162, 10759, 2470, 637, 12282, 7619, 11385, 3049, 6706, 427, 3851, 10127, 8785, 4666, 7926, 9523, 10211, 10384, 2792, 114, 8208, 3623, 10282, 1103, 8125, 5571, 6078, 4327, 4523, 4842, 9535, 9425, 5546, 7556, 8069, 3266, 11526, 6981, 7796, 7366, 6133, 6598, 9457, 6888, 3797, 2926, 7706, 9915, 9360, 4389, 9697, 6131, 7874, 6057, 9126, 4781, 6304, 1407, 8309, 5340, 8503, 2899, 3974, 9101, 4982, 4619, 8450, 10678, 3874, 1898, 4157, 8236, 9174, 7905, 1512, 8767, 4817, 827, 3645, 9196, 5887, 3502, 8622, 9031, 6605, 3713, 4928, 9252, 7073, 182, 6492, 5206, 9158, 9034, 1133, 2718, 10062, 9151, 3628, 237, 10134, 816, 5665, 9593, 1928, 11259, 6264, 6015, 10591, 4403, 11157, 11186, 2089, 2393, 766, 7569, 1947, 8571, 9679, 3700, 7004, 11354, 11431, 10480, 810, 301, 973, 7446, 244, 11587, 1946, 4672, 2123, 10901, 8253, 4540, 10760, 11259, 7831, 12010, 7264, 1842, 8076, 8274, 9520, 1385, 8420, 10375, 9312, 5526, 3583, 2101, 12110, 10327, 12281, 145, 4766, 10057, 2118, 11083, 2622, 2599, 11097, 1081, 6575, 2066, 9639, 2750, 6615, 4138, 8218, 8686, 9499, 10686, 5946, 8032, 8655, 1077, 10421, 4916, 11341, 6815, 1856, 9487, 10798, 10263, 4662, 4880, 995, 5938, 5567, 10730, 697, 4257, 4481, 771, 7970, 3900, 9026, 4553, 8000, 4491, 7849, 8982, 3915, 11361, 3017, 7277, 2287, 8704, 1112, 5669, 5222, 6642, 9164, 2095, 779, 11845, 3037, 10284, 11599, 4517, 8395, 12251, 8805, 4764, 2656, 5150, 3802, 7642, 590, 3446, 7097, 6381, 10982, 5496, 3282, 3029, 4318, 7681, 11146, 3368, 11651, 2333, 8528, 3391, 9750, 97, 4698, 12073, 10956, 10200, 2695, 4629, 11392, 1721, 2419, 2282, 7150, 1157, 5233, 3330, 11898, 8609, 4228, 9125, 3779, 9369, 10727, 9864, 3460, 10497, 6415, 2608, 3942, 4040, 10833, 3977, 750, 403, 9763, 8507, 11159, 10803, 9095, 6014, 11255, 5381, 11007, 3605, 7411, 10551, 10740, 8410, 7424, 9486, 3539, 10437, 5638, 11213, 6635, 2711, 11895, 11615, 11496, 1667, 8418, 9157, 7592, 9757, 774, 6452, 11412, 7654, 7798, 5799, 10625, 4489, 334, 11866, 2665, 5028, 7865, 209, 9672, 2041, 5457, 10081, 8209, 7732, 3971, 10795, 9617, 649, 11631, 3123, 8598, 3563, 4810, 280, 4338, 1689, 6980, 851, 10234, 4235, 2499, 7247, 3410, 5706, 551, 9998, 8212, 3579, 8014, 7169, 531, 5564, 6217, 4746, 6988, 11608, 2998, 148, 6738, 55, 9677, 7432, 11415, 346, 1497, 2242, 11694, 4773, 2215, 1342, 11841, 10435, 7406, 4801, 9420, 4496, 5673, 10976, 4313, 3776, 4138, 8696, 9206, 7236, 632, 3481, 5909, 4705, 10029, 11310, 11798, 10840, 6825, 5273, 2705, 4299, 8578, 2806, 1922, 3913, 7146, 6590, 2383, 7646, 10313, 6916, 5683, 1478, 5942, 11377, 8701, 9768, 6220, 11297, 3377, 2000, 5713, 8842, 10683];
    // prettier-ignore
    uint16[512] nttf = [uint16(6692), 7978, 3587, 10450, 4139, 7864, 7145, 10236, 4793, 10446, 9525, 4685, 877, 3255, 5380, 6943, 6877, 11756, 10582, 5471, 9845, 9809, 4920, 948, 6205, 6816, 4015, 6512, 11636, 9908, 11322, 5820, 5889, 11279, 2002, 226, 7200, 1326, 8469, 9081, 286, 617, 8015, 8884, 2009, 3402, 6248, 7023, 10381, 1441, 1468, 1099, 7583, 9660, 6604, 4541, 9666, 9537, 1228, 9720, 4689, 1741, 7097, 5771, 5546, 1679, 10656, 9175, 11502, 2608, 1366, 5248, 1759, 4276, 1691, 1782, 2647, 4704, 12114, 5396, 1612, 7151, 508, 7833, 6696, 3184, 11134, 4856, 10078, 8754, 569, 1070, 5108, 4404, 5818, 447, 8788, 5201, 11293, 6271, 11739, 3390, 10062, 2932, 1456, 10010, 11603, 7290, 6565, 892, 9212, 640, 9496, 12185, 2324, 9829, 10148, 2701, 10203, 5494, 7132, 7194, 6320, 3294, 468, 3573, 9106, 2560, 9473, 8976, 2468, 11650, 9679, 12249, 2695, 8269, 8521, 8352, 10784, 9611, 4534, 3477, 4412, 9144, 8085, 6299, 7682, 10573, 11748, 8190, 632, 2296, 5901, 6953, 6829, 11489, 8189, 4623, 10646, 7427, 989, 8852, 6632, 9411, 5800, 8369, 9733, 2487, 583, 8363, 9983, 6062, 11474, 3046, 10700, 11814, 3348, 2200, 6597, 5374, 9408, 5947, 1237, 7022, 1226, 1539, 7369, 9538, 7907, 4204, 3854, 207, 9778, 2725, 2737, 4642, 1927, 10818, 2723, 1858, 2534, 10771, 11246, 7376, 6686, 5152, 11091, 10783, 1161, 8509, 8743, 9010, 8020, 4660, 10299, 9306, 8346, 5834, 2798, 1354, 3371, 8174, 2992, 8770, 8531, 8752, 3539, 7337, 7925, 11927, 10251, 8128, 6421, 9747, 2594, 11985, 7990, 1895, 6665, 6132, 9618, 1757, 1297, 8033, 9559, 3595, 2624, 11111, 6448, 823, 6779, 8349, 1595, 11720, 6834, 4010, 10604, 1879, 499, 5012, 11584, 204, 4528, 2383, 3066, 6949, 4036, 2912, 11600, 4101, 1749, 11984, 4270, 1799, 10579, 6623, 3640, 7922, 2671, 3186, 963, 1485, 3583, 770, 3234, 6378, 6449, 5226, 1218, 3383, 10807, 2514, 10806, 1555, 2039, 7196, 10949, 1746, 3202, 2554, 1453, 1201, 4455, 3491, 6193, 10641, 5430, 6138, 11597, 11731, 3783, 2566, 12140, 2424, 8501, 1053, 11551, 5496, 8416, 1515, 2761, 8688, 12196, 11863, 11974, 11383, 8379, 12187, 5721, 990, 7933, 11618, 8478, 10500, 5225, 6679, 633, 9677, 1846, 8089, 7429, 414, 2113, 10884, 11740, 2330, 1562, 11175, 11382, 8781, 2228, 6858, 8185, 4760, 6630, 6141, 10822, 3022, 8009, 5966, 8933, 10874, 7656, 506, 8872, 2629, 4373, 9030, 314, 1468, 966, 9329, 3255, 10484, 6460, 7609, 6167, 9542, 6739, 5351, 7738, 9232, 6635, 2662, 3436, 10888, 2864, 353, 9306, 7860, 11833, 1766, 3140, 11601, 10683, 2348, 9954, 2958, 10636, 7795, 10493, 1564, 5192, 3412, 10912, 11455, 8549, 10449, 1541, 5246, 844, 7452, 4460, 4717, 4636, 12229, 10338, 8562, 9514, 11908, 5094, 1184, 6465, 4091, 4144, 2255, 1284, 6231, 1098, 9812, 5583, 337, 2739, 10631, 9296, 5434, 7862, 1156, 1352, 9802, 8206, 7425, 2851, 4853, 11111, 5735, 2841, 5400, 10821, 10014, 11680, 2111, 2613, 2265, 7063, 8940, 2874, 4711, 11797, 5169, 4311, 9257, 9142, 6253, 10400, 8167, 3351, 1826, 3153, 1530, 4208, 6917, 4707, 7149, 1029, 9996, 12171, 11048, 1023, 10749, 10032, 6812, 762, 6847, 10097, 5854, 3263, 567, 1196, 9235, 8777, 1860, 5160, 1897, 5132, 10420, 11115, 4499, 5607, 5528, 8633, 11004, 1854, 2286, 1275, 891, 11635, 11587, 5277, 6460, 3862, 10353];
    NTT ntt;
    function setUp() public {
        ntt = new NTT();
    }
    function testNTT() public {
        uint256[] memory t = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            t[i] = f[i];
        }
        uint256[] memory res = ntt.nTT(t);
        for (uint i = 0; i < 512; i++) {
            assertEq(res[i], nttf[i]);
        }
    }

    function testINTT() public {
        uint256[] memory t = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            t[i] = nttf[i];
        }
        uint256[] memory res = ntt.iNTT(t);
        for (uint i = 0; i < 512; i++) {
            assertEq(res[i], f[i]);
        }
    }

    function testSmallNTT() public {
        uint256[] memory t = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            t[i] = [7967, 11836, 7356, 6533, 11162, 3606, 8926, 6376][i];
        }
        uint256[] memory res = ntt.nTT(t);
        // prettier-ignore
        uint256[8] memory ref = [uint256(3766), 4560, 5198, 11650, 790, 11575, 1749, 12159];
        for (uint i = 0; i < 8; i++) {
            assertEq(res[i], ref[i]);
        }
    }

    function testMergeNTT() public {
        uint256[] memory n1 = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            n1[i] = [3227, 10513, 10307, 1790, 8477, 6234, 11796, 4023][i];
        }
        uint256[] memory n2 = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            n2[i] = [1791, 1539, 164, 9944, 7836, 11375, 10497, 11872][i];
        }
        uint256[] memory mn12 = ntt.mergeNTT(n1, n2);
        // prettier-ignore
        uint256[16] memory ref = [uint256(1853), 4601, 7853, 884, 516, 7809, 5805, 10064, 6050, 10904, 2381, 10087, 18, 11285, 1689, 6357];
        for (uint i = 0; i < 16; i++) {
            assertEq(mn12[i], ref[i]);
        }
    }

    function testMulZQ() public {
        uint256[] memory a = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            a[i] = [7488, 8357, 10738, 10489, 9342, 4703, 5408, 12082][i];
        }
        uint256[] memory b = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            b[i] = [59, 2374, 3391, 5556, 1303, 1946, 10633, 5023][i];
        }
        uint256[] memory res = ntt.mulZQ(a, b);
        // prettier-ignore
        uint256[8] memory ref = [uint256(618), 2028, 2972, 500, 7674, 10354, 11970, 1583];
        for (uint i = 0; i < 8; i++) {
            assertEq(res[i], ref[i]);
        }
    }
    function testSubZQ() public {
        uint256[] memory a = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            a[i] = [7488, 8357, 10738, 10489, 9342, 4703, 5408, 12082][i];
        }
        uint256[] memory b = new uint[](8);
        for (uint i = 0; i < 8; i++) {
            b[i] = [59, 2374, 3391, 5556, 1303, 1946, 10633, 5023][i];
        }
        uint256[] memory res = ntt.subZQ(a, b);
        // prettier-ignore
        uint256[8] memory ref = [uint256(7429), 5983, 7347, 4933, 8039, 2757, 7064, 7059];
        for (uint i = 0; i < 8; i++) {
            assertEq(res[i], ref[i]);
        }
    }
}
